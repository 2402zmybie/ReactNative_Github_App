setParams设置的属性 都会存放在navigation的state里面

动态设置底部导航栏:
createBottomTabNavigator(tabs, {
            tabBarComponent: TabBarComponent
        });

class TabBarComponent extends React.Component {
    constructor(props) {
        super(props);
        this.theme = {
            tintColor: props.activeTintColor,
            updateTime:new Date().getTime()
        }
    }
    render() {
        const {routes,index} = this.props.navigation.state;
        if(routes[index].params) {
            const { theme } = routes[index].params;
            if(theme && theme.updateTime > this.theme.updateTime) {
                this.theme = theme
            }
        }
        return <BottomTabBar
            {...this.props}
            activeTintColor={this.theme.tintColor || this.props.activeTintColor}
        />
    }
}

设置顶部导航栏的属性:
render() {
        const TopTab = createMaterialTopTabNavigator(this._genTabs(),{
            tabBarOptions: {
                tabStyle:styles.tabStyle,
                scrollEnabled:true,
                upperCaseLabel:false,
                style: {
                    backgroundColor:'#678'
                },
                indicatorStyle:styles.indicatorStyle,
                labelStyle:styles.labelStyle
            }
        })
        return <TopTab/>
    }

在React Native中使用Redux和react-naivgaiton组合
npm i --save react-navigation-redux-helpers@2.0.9
npm i redux@4.0.1
npm i react-redux@5.1.0
npm i redux-thunk@2.3.0

fetch:
            fetch(url)
            .then(resp => {
                if(resp.ok) {
                    return resp.text()
                }
                throw new Error('network is not fine')
            })
            .then(response => {
                this.setState({
                    text: response
                })
            })
            .catch(e => {
                this.setState({
                    text: e.toString()
                })
            })

        }
fetch在请求url的时候还有第二个参数 Object对象


AsyncStorage:
简单异步持久化的key-value存储系统,官方推荐的数据存储方式
用法: setItem  getItem  reamoveItem  第二个参数调用,或者直接使用Promise的形式


Offline cache framework(离线缓存框架):
目的: 1 提升用户体验  2节省流量(节省服务器流量,节省用户手机流量)
策略:
    a:优先从本地获取数据,如果数据过时或者不存在则从服务器获取数据,数据返回后同时将数据同步到本地数据库(RN_GitHub使用的则是这个策略)
    b:优先从服务器获取数据,数据返回后同时将数据同步到本地数据库,如果网络故障则从本地获取数据
    c:同时从本地和服务器获取数据,如果本地数据库返回数据则先展示本地数据,等网络数据回来后在展示网络数据同时将数据同步到本地数据库
    以上则是离线缓存的几种策略
    



